
//modeflag to syscall 9
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

//Save user stack value, set up the kernel stack
alias userSP R0;
userSP=SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

//name of the file from user stack.
alias physicalPageNum R1;
alias offset R2;
alias filenamePhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
filenamePhysicalAddr = (physicalPageNum * 512) + offset;
alias filename R4;
filename=[filenamePhysicalAddr];

//Search the memory copy of the inode table for the file
alias i R5;
i=0;
alias inodeIndex R6;
while(i<MAX_FILE_NUM)do
     if([INODE_TABLE +16*i+1]!=filename)then
        i=i+1;
        continue;
     else
        inodeIndex=i;
        break;
     endif;
endwhile;
if(i==MAX_FILE_NUM)then
   alias physicalAddrRetVal R7;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
	 [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
         SP = userSP;
         ireturn;
endif;
  
  //Call the Exit Process
         multipush(R0,R1,R2,R3,R4,R5,R6,R7);
         R1=3;
         R2= [SYSTEM_STATUS_TABLE + 1];
         call MOD_1;
         multipop(R0,R1,R2,R3,R4,R5,R6,R7); 
   breakpoint;
// Reclaim the same userareapage
alias userareapage R8;
userareapage=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
[MEMORY_FREE_LIST + userareapage] = [MEMORY_FREE_LIST + userareapage] + 1;
[SYSTEM_STATUS_TABLE + 2]=[SYSTEM_STATUS_TABLE + 2]-1;//mem_free_count

SP=userareapage*512-1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4]=RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7]=inodeIndex;

  PTBR = PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20;
//librarypages
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
multipush(R0,R1,R2,R3,R4,R5,R6,R8);
i=0;
while(i<2) do  
    R1=1;  // get free page func call number
    call MOD_2;
    [PTBR+2*i+4]=R0; //heap 
    [PTBR+2*i+5]="0110";
    i=i+1;
endwhile;
multipop(R0,R1,R2,R3,R4,R5,R6,R8);
multipush(R0,R1,R2,R3,R4,R5,R6,R8);
i=0;
while(i<2) do  
    R1=1;  // get free page func call number
    call MOD_2;
    [PTBR+2*i+16]=R0; //stack
    [PTBR+2*i+17]="0110";
    i=i+1;
endwhile;
multipop(R0,R1,R2,R3,R4,R5,R6,R8);
alias datablock R9;
i=0;
while(i<4)do
  datablock=[INODE_TABLE +inodeIndex*16+8+i];//code
  if(datablock!=-1)then
    R1=1;
    call MOD_2;
    alias pageno R0;
    [PTBR+2*i+8]=R0; //code
    [PTBR+2*i+9]="0110";
    loadi(pageno,datablock);
  endif;
  i=i+1;
endwhile;
multipop(R0,R1,R2,R3,R4,R5,R6,R8);

[[PTBR+16]*512]=[[PTBR+8]*512+1];
SP=8*512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;

 	 
