alias functionNum R1;

if(functionNum==2) then //bufferred read
    alias diskBlockNum R2;
    alias offset R3;
    alias bufferAddr R4;
    alias buffNum R5;
    buffNum=diskBlockNum%4;
    multipush(R1,R2,R3,R4,R5);
    R1=1;       // acquire buffer
    R3=buffNum;
    R2=[SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5);
    if([BUFFER_TABLE+4*buffNum]!=diskBlockNum) then   // diff block in buffer table
        if([BUFFER_TABLE+4*buffNum+1]==1) then        //dirty bit set
            multipush(R1,R2,R3,R4,R5);
            R1=1; //disk store
            R2=[SYSTEM_STATUS_TABLE+1];
            R3=71+buffNum;
            R4=[BUFFER_TABLE+4*buffNum];
            call DEVICE_MANAGER;
            multipop(R1,R2,R3,R4,R5);
            [BUFFER_TABLE+4*buffNum+1]=0;
        endif;
        multipush(R1,R2,R3,R4,R5);
        R1=2; //disk load
        R4=diskBlockNum;
        R2=[SYSTEM_STATUS_TABLE+1];
        R3=71+buffNum;
        call DEVICE_MANAGER;
        multipop(R1,R2,R3,R4,R5);
        [BUFFER_TABLE+4*buffNum]=diskBlockNum;
    endif;
    [bufferAddr]=[(71+buffNum)*512+offset];
    multipush(R1,R2,R3,R4,R5);
    R1=2;       // release buffer
    R3=buffNum;
    R2=[SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5);
    return;
endif;

if(functionNum==3) then // open  
    alias fileName R2;
    alias i R8;
    i=0;
    alias inodeIndex R9;
    while(i<MAX_FILE_NUM) do //index of the Inode Table entry of the file
        if([INODE_TABLE+16*i+1]==fileName) then
            inodeIndex=i;
            break;
        endif;
        i=i+1;
    endwhile;
    if(i==60) then  // file not present
        R0=-1;
        return;
    endif;
    multipush(R1,R2,R8,R9);
    R1=4; //acquire inode
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=inodeIndex;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R8,R9);
    if(R0==-1) then // locking inode failed
        return;
    endif;
    i=0;
    alias openfileID R10;
    while(i<32) do
        if([OPEN_FILE_TABLE+4*i]==-1) then
            openfileID=i;
            break;
        endif;
        i=i+1;
    endwhile;
    if(([INODE_TABLE+16*inodeIndex]==EXEC)||(i==32)) then
        multipush(R1,R2,R8,R9,R10);
        R1=5; //release inode
        R2=[SYSTEM_STATUS_TABLE+1];
        R3=inodeIndex;
        call RESOURCE_MANAGER;
        multipop(R1,R2,R8,R9,R10);
        if(i==32) then // max no of files opened already
            R0=-2;
            return;
        else           // file is not data file
            R0=-1;
            return;
        endif;
    endif;
    if(fileName=="root") then
        [OPEN_FILE_TABLE+4*openfileID]=INODE_ROOT;
    else
        if([FILE_STATUS_TABLE+4*inodeIndex+1]==-1) then
            [FILE_STATUS_TABLE+4*inodeIndex+1]=1;
        else    
            [FILE_STATUS_TABLE+4*inodeIndex+1]=[FILE_STATUS_TABLE+4*inodeIndex+1]+1;
        endif;
        [OPEN_FILE_TABLE+4*openfileID]=inodeIndex;
    endif;
    [OPEN_FILE_TABLE+4*openfileID+1]=1;  // open instance count
    [OPEN_FILE_TABLE+4*openfileID+2]=0;  // LSEEK
    multipush(R1,R2,R8,R9,R10);
    R1=5; //release inode
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=inodeIndex;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R8,R9,R10);
    R0=openfileID;
    return;
endif;

if(functionNum==4) then // close  
    alias openfileID R2;
    alias inodeIndex R8;
    inodeIndex=[OPEN_FILE_TABLE+4*openfileID];
    [OPEN_FILE_TABLE+4*openfileID+1]=[OPEN_FILE_TABLE+4*openfileID+1]-1;
    if([OPEN_FILE_TABLE+4*openfileID+1]==0) then 
        [OPEN_FILE_TABLE+4*openfileID+0]=-1;
        [OPEN_FILE_TABLE+4*openfileID+1]=-1;
        [OPEN_FILE_TABLE+4*openfileID+2]=-1;
        [OPEN_FILE_TABLE+4*openfileID+3]=-1;
        if([INODE_TABLE+16*inodeIndex+1]!="root") then
            [FILE_STATUS_TABLE+4*inodeIndex+1]=[FILE_STATUS_TABLE+4*inodeIndex+1]-1;
        endif;
        if([FILE_STATUS_TABLE+4*inodeIndex+1]==0) then
            [FILE_STATUS_TABLE+4*inodeIndex+1]=-1;
        endif;
    endif;
    return;
endif;
