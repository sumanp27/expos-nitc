alias functionNum R1;

if(functionNum==1) then //get free page
    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1; //incrementing wait_mem_count
    while([SYSTEM_STATUS_TABLE+2]==0) do // while mem is full
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_MEM;
        multipush(R0,R1);
        call SCHEDULER;
        multipop(R0,R1);
    endwhile;
    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;
    [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
    alias i R3;
    i=0;
    while(i<MAX_MEM_PAGE) do   
        if([MEMORY_FREE_LIST + i]==0) then
            [MEMORY_FREE_LIST + i]=1;
            R0=i; //return value = free page
            //breakpoint; // BREAKPOINT
            return;
        endif;
        i=i+1;
    endwhile;
endif;

if(functionNum==2) then //release page
    alias pageNum R2;
    [MEMORY_FREE_LIST+ pageNum]=[MEMORY_FREE_LIST+ pageNum]-1;
    if([MEMORY_FREE_LIST+ pageNum]==0) then
        [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
        alias i R3;
        i=0;
        while(i<16) do  
            if([PROCESS_TABLE+i*16+4]==WAIT_MEM) then 
                [PROCESS_TABLE+i*16+4]=READY;
            endif;
            i=i+1;
        endwhile;
    endif;
    //breakpoint; //BREAKPOINT
    return;
endif;

if(functionNum==5) then //get code page
    alias codeBlockNum R2;
    R5=R2;
    alias i R3;
    alias j R4;
    i=0;
    while(i<16) do  
        j=2;
        while(j<10) do
            if([DISK_MAP_TABLE+10*i+j]==codeBlockNum) then //if codeblock already present
                if([[PROCESS_TABLE+16*i+14]+2*j]!=-1) then //if corresponding mem page is valid
                    R0=[[PROCESS_TABLE+16*i+14]+2*j]; //return mem page
                    [MEMORY_FREE_LIST+ R0]=[MEMORY_FREE_LIST+ R0]+1;
                    return;
                endif;
            endif;
            j=j+1;
        endwhile;
        i=i+1;
    endwhile;
    multipush(R1,R2);
    R1=1; //get free page
    call MEMORY_MANAGER;
    alias memPage R0;
    R1=2; //disk load
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=memPage;
    R4=R5;
    call DEVICE_MANAGER;
    multipop(R1,R2);
    return;
endif;

if(functionNum==4) then // release_block
    [DISK_FREE_LIST+R2]=[DISK_FREE_LIST+R2]-1;
    return;
endif;

if(functionNum==3) then // get free block
    alias i R5;
    i=DISK_FREE_AREA;
    while(i<DISK_SWAP_AREA) do
        if([DISK_FREE_LIST+i]==0) then // free entry
            [DISK_FREE_LIST+i]=1;
            R0=i;
            return;
        endif;
        i=i+1;
    endwhile;
    if(i==DISK_SWAP_AREA) then         // disk full
        R0=-1;
        return;
    endif;
endif;
