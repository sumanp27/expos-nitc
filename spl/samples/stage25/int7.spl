alias userSP R1;
  userSP = SP;

  alias pt R2;
  pt = PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 ;

  //set the mode 
  [pt + 9] =5;
  [pt + 13] = SP;
  SP = [pt + 11]*512 -1;
  
  alias retAddress R3;
  retAddress=[PTBR+2*((userSP-1)/512)]*512 + (userSP-1)%512;

  // get the file descriptor 
  alias fileDescriptor R4;
  fileDescriptor = [[PTBR+2*((userSP-4)/512)]*512 + (userSP-4)%512];
  
  alias word R5;
  word=[[PTBR+2*((userSP-3)/512)]*512+((userSP-3)%512)];



if (fileDescriptor == -2)then 
    multipush(R1,R2,R3,R4,R5);
      R1=  TERMINAL_WRITE ; 
      R2=[SYSTEM_STATUS_TABLE+1];
      R3=word;
      call DEVICE_MANAGER; 
    multipop(R1,R2,R3,R4,R5);
    [retAddress]=0;
else
     // invalid filedescriptor 
     if(fileDescriptor<0 || fileDescriptor >7 )then 
        [retAddress] =-1;
        [pt +9] =0;
        SP = userSP;
        ireturn;
     endif;
     // entry not a file 
    alias fdEntry R6;
    fdEntry=[pt+11]*512+496+2*fileDescriptor;
    if(([fdEntry]==-1)||([fdEntry]!=FILE)) then //invalid fd
        [retAddress]=-1;
        [pt +9]=0;
        SP=userSP;
        ireturn;
    endif; 

    alias openfileEntry R14;
    openfileEntry=OPEN_FILE_TABLE+4*[fdEntry+1];
    alias inodeIndex R7;
    inodeIndex=[openfileEntry];
    if([INODE_TABLE+16*inodeIndex+4]==0) then 
    //exclusive bit is set
        if(([pt+3]!=1)&&([INODE_TABLE+16*inodeIndex+3]!=[pt+3])) then
        // current user is not root and current user do not own the file
            [retAddress]=-3;
            [pt + 9] =0;
            SP=userSP;
            ireturn;
        endif;
    endif;
    
    // Acquire inode 
    multipush(R1,R2,R3,R4,R5,R6,R7,R14);
    R1= ACQUIRE_INODE; 
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=inodeIndex;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R14);
    if(R0==-1) then 
        [retAddress]=-1;
        SP=userSP;
        ireturn;
    endif;


    alias lSeek R8;
    lSeek=[openfileEntry+2];
    // max file size reached 
    if(lSeek==MAX_FILE_SIZE) then  
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R14);
        R1= RELEASE_INODE;
        R2=[SYSTEM_STATUS_TABLE+1];
        R3=inodeIndex;
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R14);
        [retAddress]=-2;
        [pt + 9] =0;
        SP=userSP;
        ireturn;
    endif;
    
    if((lSeek%512==0)&&(lSeek==[INODE_TABLE+16*inodeIndex+2])) then 
        // get a new block 
        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R14);
        R1=3;  
        call MEMORY_MANAGER;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R14);
        // unable to get a new block 
        if(R0==-1) then 
        // Release Inode 
            multipush(R1,R2,R3,R4,R5,R6,R7,R8,R14);
            R1=5; 
            R2=[SYSTEM_STATUS_TABLE+1];
            R3=inodeIndex;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7,R8,R14);
            [retAddress]=-2;
            [pt + 9] =0;
            SP=userSP;
            ireturn;
        endif;
        [INODE_TABLE+16*inodeIndex+8+(lSeek/512)]=R0;
    endif;

   // Buffered Write  
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R14);
    R1=1;                                          
    R2=[INODE_TABLE+16*inodeIndex+8+(lSeek/512)]; 
    R3=lSeek%512;                           
    R4=word;
    call FILE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R14);

    if(lSeek==[INODE_TABLE+16*inodeIndex+2]) then  
        [INODE_TABLE+16*inodeIndex+2]=[INODE_TABLE+16*inodeIndex+2]+1;
        [ROOT_FILE+8*inodeIndex+1]=[ROOT_FILE+8*inodeIndex+1]+1;
    endif;
    lSeek=lSeek+1;
    [openfileEntry+2]=lSeek;
    // Release Inode 
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R14);
    R1=5; 
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=inodeIndex;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R14);

endif;

SP = userSP;
[pt + 9] = 0;
[retAddress] =0;
ireturn ;

