 // ----- FORK SYS-CALL ------- 

// set the mode and save SP
   [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=8; 
   [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;

// switch to kernel mode 
   SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;
   
// get PCB entry
   R1=1; 
   call MOD_1;
   R4=R0;

   alias childPid R4;
   alias parentPid R5;
   R5=[SYSTEM_STATUS_TABLE+1];
   
// free process table not available 
   if(childPid==-1) then 
      [PROCESS_TABLE+parentPid*16+9]=0; 
      R0=-1;
      SP=[PROCESS_TABLE+parentPid*16+13];
      ireturn;
   endif;


   alias i R10;
   multipush(R4,R5);

// no heap pages for parent process 
   if([[PROCESS_TABLE+parentPid*16+14]+4]==-1) then 
      i=0;
      while(i<2) do 
         // get free page 
            R1=1; 
            call MOD_2; 
            [[PROCESS_TABLE+parentPid*16+14]+2*i+4]=R0; 
            [[PROCESS_TABLE+parentPid*16+14]+2*i+5]="1110";
            i=i+1;
      endwhile;
   endif;

   multipop(R4,R5);

// allocate stack pages  
   multipush(R4,R5);
   // get free page
      R1=1;  
      call MOD_2; 
      [[PROCESS_TABLE+childPid*16+14]+16]=R0;
      [[PROCESS_TABLE+childPid*16+14]+17]="0110";
   // get free page
      R1=1;  
      call MOD_2;
      [[PROCESS_TABLE+childPid*16+14]+18]=R0; 
      [[PROCESS_TABLE+childPid*16+14]+19]="0110";

// allocate userarea Page 
   // get free page 
      R1=1;  
      call MOD_2; 
      [PROCESS_TABLE +childPid*16+11]=R0; 

      
   multipop(R4,R5);

// copy processtable entries to child 
      alias childPTBR R7 ;
      alias parentPTBR R8 ;
      childPTBR = PROCESS_TABLE+childPid*16;
      parentPTBR = PROCESS_TABLE+parentPid*16 ;

      [childPTBR+0]=0; 
      [childPTBR+2]=parentPid; 
      [childPTBR+3]=[parentPTBR+3]; 
      [childPTBR+4]=CREATED; 
      [childPTBR+6]=[parentPTBR+6]; 
      [childPTBR+7]=[parentPTBR+7];
      [childPTBR+9]=0; 
      [childPTBR+10]=[parentPTBR+10]; 
      [childPTBR+12]=0; 
      [childPTBR+13]=[parentPTBR+13]; 

// copy per process page table 
alias semindex R11;
i=0;
while(i<8) do
    [[childPTBR+11]*512+2*i+496]=[[parentPTBR+11]*512+2*i+496];      
    [[childPTBR+11]*512+2*i+1+496]=[[parentPTBR+11]*512+2*i+1+496];
    if([[childPTBR+11]*512+2*i+496]==1) then                    // checking for semaphores
        semindex=[[childPTBR+11]*512+2*i+496+1];
        [SEMAPHORE_TABLE+4*semindex+1]=[SEMAPHORE_TABLE+4*semindex+1]+1;//increment the process count
    endif;
    i=i+1;
endwhile;

// copy perprocess disk table 
   i=0;
   while(i<10) do 
      [DISK_MAP_TABLE+childPid*10+i]=[DISK_MAP_TABLE+parentPid*10+i];
      i=i+1;
   endwhile;

// copy page table entries except stack 
   i=0;
   while(i<8) do 
      [[PROCESS_TABLE+childPid*16+14]+2*i]=[[PROCESS_TABLE+parentPid*16+14]+2*i];
      [MEMORY_FREE_LIST+[[PROCESS_TABLE+parentPid*16+14]+2*i]]=[MEMORY_FREE_LIST+[[PROCESS_TABLE+parentPid*16+14]+2*i]]+1; //increasing share count in mem free list
      [[PROCESS_TABLE+childPid*16+14]+2*i+1]=[[PROCESS_TABLE+parentPid*16+14]+2*i+1];
      i=i+1;
   endwhile;

// copy parent userStack 
   i=0;
   while(i<512) do 
      [[[PROCESS_TABLE+childPid*16+14]+16]*512+i]=[[[PROCESS_TABLE+parentPid*16+14]+16]*512+i];
      [[[PROCESS_TABLE+childPid*16+14]+18]*512+i]=[[[PROCESS_TABLE+parentPid*16+14]+18]*512+i];
      i=i+1;
   endwhile;


   [[PROCESS_TABLE+childPid*16+11]*512]=BP;

// return values for parent and child 
   //parent 
      alias parentSP R6;
      parentSP=[PROCESS_TABLE+parentPid*16+13];
      [([[PROCESS_TABLE+parentPid*16+14]+2*((parentSP-1)/512)]*512)+((parentSP-1)%512)]=childPid;
   //child 
      alias childSP R7;
      childSP=[PROCESS_TABLE+childPid*16+13];
      [([[PROCESS_TABLE+childPid*16+14]+2*((childSP-1)/512)]*512)+((childSP-1)%512)]=0; 

// reset the mode and return to usermode 
   [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
   SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
   ireturn;
