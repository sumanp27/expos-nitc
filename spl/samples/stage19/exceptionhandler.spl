breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9]=-1;// indicating exception handler mode

alias userSP R11;
userSP=SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;
//Switch to the kernel stack.
backup;

multipush(EIP);
PTBR = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] ;
PTLR = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 15] ;
if(EC!=0)then
   if(EC==1)then
     print("Illegal Instruction");
   endif;
    if(EC==2)then
     print("Illegal Memory Access");
   endif;
    if(EC==3)then
     print("Arithmetic Exception");
   endif;
   multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
    R1=3; //exit process
    R2=[SYSTEM_STATUS_TABLE+1];
    call MOD_1;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
    call MOD_5;
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
    return;
endif;

if(EC==0)then
  //pagefault
  if((EPN>=4) && (EPN<=7))then//codepage
      multipush(R2);
        alias codeBlockNum R2;
        codeBlockNum = [DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+EPN];
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
        R2=codeBlockNum;
        R1=5; //get code page
        multipush(EPN);
        call MEMORY_MANAGER;
        multipop(EPN);
        [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*EPN]=R0;
        [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*EPN+1]="1100";
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
        multipop(R2);
    endif;
     if((EPN>=2)&&(EPN<=3)) then //heap page
        //print "heap";
        multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
        R1=1; //get free page
        multipush(EPN);
        call MEMORY_MANAGER;
        multipop(EPN);
        [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+4]=R0;
        [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+5]="1110";
        multipush(EPN);
        R1=1; //get free page
        call MEMORY_MANAGER;
        multipop(EPN);
        [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+6]=R0;
        [[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+7]="1110";
        multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
    endif;
endif;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
multipop(EIP);
restore;
SP=userSP;
SP=SP+1;
[[PTBR+2*(SP/512)]*512+(SP%512)]=EIP;
ireturn;
  
