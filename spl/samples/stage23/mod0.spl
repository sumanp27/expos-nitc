alias functionNum R1;
alias currentPID R2;

if(functionNum == 3)then //acquiredisk

  while([DISK_STATUS_TABLE]==1)do
     [PROCESS_TABLE+(currentPID*16)+4] = WAIT_DISK; 
       multipush(R0,R1,R2,R3,R4,R5,R6);
      call MOD_5;
      multipop(R0,R1,R2,R3,R4,R5,R6);
  endwhile;
     [DISK_STATUS_TABLE]=1;
     [DISK_STATUS_TABLE+4]=currentPID;
       return;
endif;

if(functionNum == 8)then //acquireterminal
   while(( [TERMINAL_STATUS_TABLE] ) == 1 )do
      [ (PROCESS_TABLE + ( currentPID* 16) ) + 4]=WAIT_TERMINAL;
      multipush(R0,R1,R2,R3,R4,R5,R6);
      call MOD_5;
      multipop(R0,R1,R2,R3,R4,R5,R6);
   endwhile;
   [TERMINAL_STATUS_TABLE]=1;
   [TERMINAL_STATUS_TABLE + 1]=currentPID;
   breakpoint;
   return;
endif;

if(functionNum == 9)then //release terminal
   if([TERMINAL_STATUS_TABLE + 1] == currentPID)then
      [TERMINAL_STATUS_TABLE]=0;
      alias count R6;
      count=0;
      while(count<16)do
        if([PROCESS_TABLE + ( count* 16) + 4]==WAIT_TERMINAL) then
           [PROCESS_TABLE + ( count* 16) + 4]=READY;
        endif;
        count=count+1;
      endwhile;
      
       R0=0;
       breakpoint;
       return;
       
    endif;
    R0=-1;
    return;
endif;
return;

if(functionNum==6) then //acquire semaphore
    alias pid R10;
    pid=currentPID;
    alias i R11;
    i=0;
    alias index R12;
    index=-1;
    while(i<32) do
        if([SEMAPHORE_TABLE+4*i+1]==0) then 
            index=i;
            break;
        endif;
        i=i+1;
    endwhile;
    if(index==-1) then // no free entry
        R0=-1;
        return;
    endif;
    [SEMAPHORE_TABLE+4*index]=pid;
    [SEMAPHORE_TABLE+4*index+1]=1;
    R0=index;
    return;
endif;
if(functionNum==7) then //release semaphore
    alias pid R10;
    pid=currentPID;
    alias semTableID R11;
    semTableID=R3;
    alias i R12;
    i=0;
    if([SEMAPHORE_TABLE+4*semTableID]==pid) then
        [SEMAPHORE_TABLE+4*semTableID]=-1;
        while(i<16) do 
            if(([PROCESS_TABLE+i*16+4]==WAIT_SEMAPHORE)&&([PROCESS_TABLE+i*16+5]==semTableID)) then
                [PROCESS_TABLE+i*16+4]=READY;
                [PROCESS_TABLE+i*16+5]=-1;
            endif;
            i=i+1;
        endwhile;
    endif;
    [SEMAPHORE_TABLE+4*semTableID+1]=[SEMAPHORE_TABLE+4*semTableID+1]-1;
    R0=0;
    return;
endif;

if(functionNum==4) then //acquire inode
    alias inodeIndex R3;
    while([FILE_STATUS_TABLE+4*inodeIndex]!=-1) do
        [PROCESS_TABLE+ 16*currentPID+ 4] = WAIT_FILE;
        [PROCESS_TABLE+ 16*currentPID+ 5] = inodeIndex;
        multipush(R1,R2,R3);
        call MOD_5;
        multipop(R1,R2,R3);
    endwhile;
    
    if([INODE_TABLE+16*inodeIndex+1]==-1) then // invalid entry due to deletion by other PROCESS
        R0=-1;
        return;
    endif;
    
    [FILE_STATUS_TABLE+4*inodeIndex]=currentPID;//lockingpid
    R0=0;
    return;
endif;

if(functionNum==5) then //release inode
   alias inodeIndex R3;
    if([FILE_STATUS_TABLE+4*inodeIndex]!=currentPID) then 
        R0=-1;
        return;
    endif;
    [FILE_STATUS_TABLE+4*inodeIndex]=-1;//freelockingpid
    
    alias i R4;
    i=0;
    while(i<16) do
        if(([PROCESS_TABLE+ 16*i+ 4]==WAIT_FILE)&&([PROCESS_TABLE+ 16*i+ 5]==inodeIndex)) then
            [PROCESS_TABLE+ 16*i+4] = READY;
            [PROCESS_TABLE+ 16*i+ 5] = -1;
        endif;
        i=i+1;
    endwhile;
    R0=0;
    return;

endif;
