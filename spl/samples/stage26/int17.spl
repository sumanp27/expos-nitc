alias userSp R1;
userSp = SP;

alias pt R2;
pt = PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 ;

// set mode 
    [pt +9]= 27;

//save sp and shift to kernel mode 
    [pt +13] = SP ;
    SP = [pt +11]*512 -1 ;

    alias retAddress R3;
    retAddress = [PTBR + 2*((userSp-1)/512)]*512 + (userSp-1)%512;

// invalid pid 
    if([SYSTEM_STATUS_TABLE +1] != 1)then
        [retAddress] = -2;
        [pt +9] =0;
        SP = userSp;
        ireturn;
    endif;

    alias userName R4;
    userName = [[PTBR+2*((userSp-4)/512)]*512 + (userSp-4)%512];

    alias pswd R5;
    pswd =  [[PTBR+2*((userSp-3)/512)]*512 + (userSp-3)%512];

    alias userId R6 ;
    alias i R7;

    i=0;
// get userId 
    while(i<MAX_USER_NUM) do
        if([USER_TABLE+2*i]==userName) then 
            userId=i;
            break;
        endif;
        i=i+1;
    endwhile;

// user doesn't exits 
    if(i == 16)then 
        [retAddress] = -1;
        [pt +9] =0;
        SP = userSp;
        ireturn;
    endif;

    encrypt pswd;

//password doesn't match 
    if([USER_TABLE + userId*2 +1] != pswd )then 
        [retAddress] = -1;
        [pt +9] =0;
        SP = userSp;
        ireturn;
    endif;

// set userId & shell to created
    [PROCESS_TABLE+2*16+4]=CREATED;     
    [PROCESS_TABLE+2*16+3]=userId;
    [pt+4]=WAIT_PROCESS;                
    [pt+5]=2;
    [SYSTEM_STATUS_TABLE]=userId;

//call scheduler 
    multipush(R1,R2,R3,R4,R5,R6,R7);
    call SCHEDULER;
    multipop(R1,R2,R3,R4,R5,R6,R7);

//
    [retAddress]=0;
    [pt+9]=0;
    SP=userSp;
    ireturn;


